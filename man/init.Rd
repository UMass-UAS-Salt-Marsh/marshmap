% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{init}
\alias{init}
\title{Initialize salt-marsh-mapping with user parameters}
\usage{
init()
}
\description{
Reads user-set parameters for package saltmarsh.
}
\details{
User parameters are set in two distinct locations:
\enumerate{
\item The initialization file, in the user's home directory, \verb{~/saltmarsh.yml}.
This file should contain five lines:

\verb{basedir: c:/Work/etc/saltmarsh} \cr
\code{parsdir: pars} \cr
\code{parsfile: pars.yml} \cr
\verb{scratchdir: c:/Work/etc/saltmarsh/data/scratch} \cr

a. \code{basedir} points to the base directory

b. \code{parsdir} is the parameters subdirectory. It should be \code{pars} unless you have
a good reason to change it.

c. \code{parsfile} points to the main parameter file. It should be \code{pars.yml}.

d. \code{scratchdir} points to the scratch drive, where the \code{cache} directory will be located.
See notes on caching, below.
\item Everything else, in \verb{<basedir>/<parsdir>}. The primary parameter file is
\code{pars.yml}, which points to other parameters (such as \code{sites.txt}).
}

These parameters include:
\itemize{
\item \code{sites} the name of the sites file, \code{sites.txt} by default
\item \code{classes} the name of the classes file, \code{classes.txt} by default
\item \code{dirs} alternative names for various subdirectories. The directories will keep
the standard structure--you can change names here but not paths.
\item \code{gather} a block of parameters for \code{\link[=gather]{gather()}}
}

This approach splits the user- and platform-dependent parameters (\code{saltmarsh.yml})
from parameters that are likely to be shared among users and across platforms (those in
\code{parsdir}). It allows multiple users on a shared machine (such as Unity cluster)
to set user-specific parameters if need be, while sharing other parameters.

This function reads the user parameters and adds them to the environment \code{the} with
all parameters. It is automatically run upon loading the package, and may be
rerun by the user if parameter files are changed.

You can change standard directory names (\code{data}, \code{models}, \code{flights}, \code{field},
\code{shapefiles}, \code{samples}, \code{predicted}, and \code{cache}) by setting each within a \verb{dirs:} block in \code{pars.yml}.
Directories default to standard names, which is usually what you want.

To change parameters on the fly, you can set the components of \code{the}. If you change any elements of
\code{dirs}, you'll have to run \code{\link[=set_dirs]{set_dirs()}} afterwards. Note
that parameters changed on the fly will only persist until the next call to \code{init()},
which can be called on demand but also happens automatically when the package is loaded.

For example:

\code{the$sites <- 'newsites'}  \cr
\code{the$dirs$cache <- 'newcache'} \cr
\code{the$dirs$samples <- 'samples99'} \cr
\code{set_dirs()}

\strong{Notes on caching.} A cache directory is required when \code{sourcedrive = google} or \code{sftp}. The cache
directory should be larger than the total amount of data processed--this code isn't doing any quota
management. This is not an issue when using a
\href{https://docs.unity.rc.umass.edu/documentation/managing-files/hpc-workspace/}{scratch drive on Unity},
as the limit is 50 TB. There's no great need to carry over cached data over long periods, as downloading
from Google or SFTP to Unity is very fast. Be polite and release the scratch workspace when you're done.
See comments in \code{\link[=get_file]{get_file()}} for more notes on caching.
}
